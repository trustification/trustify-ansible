apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ manifest_name }}
  namespace: "{{ tpa_single_node_namespace }}"
  labels:
    app: {{ manifest_name }}
    app.kubernetes.io/version: 2.0.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ manifest_name }}
      app.kubernetes.io/component: importer
      app.kubernetes.io/instance: redhat-trusted-profile-analyzer
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ manifest_name }}
        app.kubernetes.io/component: importer
        app.kubernetes.io/instance: redhat-trusted-profile-analyzer
    spec:
      containers:
        - name: service
          image: "{{ tpa_single_node_trustification_image }}"
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: "{{ tpa_single_node_cpu }}"
              memory: "{{ tpa_single_node_memory }}"
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - "echo > /dev/tcp/localhost/9010"
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - "echo > /dev/tcp/localhost/9010"
          command:
            - /usr/local/bin/trustd
          args:
            - importer
            - --working-dir
            - /data/workdir
            - --concurrency={{ concurrency }}
          env:
            - name: NAMESPACE
              value: "{{ tpa_single_node_namespace }}"
            - name: RUST_LOG
              value: "{{ tpa_single_node_log_filter }}"
            - name: INFRASTRUCTURE_ENABLED
              value: 'true'
            - name: INFRASTRUCTURE_BIND
              value: '[::]:9010'
            - name: TRUSTD_DB_HOST
              value: "{{ tpa_single_node_pg_host }}"
            - name: TRUSTD_DB_PORT
              value:  "{{ tpa_single_node_pg_port }}"
            - name: TRUSTD_DB_NAME
              value: "{{ tpa_single_node_pg_db }}"
            - name: TRUSTD_DB_USER
              value: "{{ tpa_single_node_pg_user }}"
            - name: TRUSTD_DB_PASSWORD
              value: "{{  tpa_single_node_pg_user_passwd }}"
            - name: TRUSTD_DB_SSLMODE
              value: "{{ tpa_single_node_pg_ssl_mode }}"
            - name: TRUSTD_DB_MAX_CONN
              value: "{{ tpa_single_node_pg_max_conn }}"
            - name: TRUSTD_DB_MIN_CONN
              value: "{{ tpa_single_node_pg_min_conn }}"
            - name: TRUSTD_DB_CONNECT_TIMEOUT
              value: "{{ tpa_single_node_pg_conn_timeout }}"
            - name: TRUSTD_DB_ACQUIRE_TIMEOUT
              value: "{{ tpa_single_node_pg_acquire_timeout }}"
            - name: TRUSTD_DB_MAX_LIFETIME
              value: "{{ tpa_single_node_pg_max_lifetime }}"
            - name: TRUSTD_DB_IDLE_TIMEOUT
              value: "{{ tpa_single_node_pg_idle_timeout }}"
{% if tpa_single_node_storage_compression != 'None' %}
            - name: TRUSTD_STORAGE_COMPRESSION
              value: {{ tpa_single_node_storage_compression }}
{% endif %}
{% if tpa_single_node_storage_region == 'None' %}
            - name: TRUSTD_STORAGE_STRATEGY
              value: fs
            - name: TRUSTD_STORAGE_FS_PATH
              value: /data/storage
{% else %}
            - name: TRUSTD_STORAGE_STRATEGY
              value: s3
            - name: TRUSTD_S3_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: storage_secret
                  key: storage_access_key
            - name: TRUSTD_S3_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: storage_secret
                  key: storage_secret_key
            - name: TRUSTD_S3_BUCKET
              value: "{{ tpa_single_node_storage_bucket }}"
            - name: TRUSTD_S3_REGION
              value: "{{ tpa_single_node_storage_region }}"
{% if s3_trust_anchors_list is defined %}
            - name: TRUSTD_S3_TRUST_ANCHORS
              value: "{{ s3_trust_anchors_list }}"
{% endif %}
{% endif %}
          ports:
            - containerPort: 9010
              protocol: TCP
              name: infra
          volumeMounts:
{% if tpa_single_node_storage_region == 'None' %}
            - name: storage
              mountPath: /data/storage
{% else %}
            - name: storage-secret
              mountPath: /etc/storagesecret
              readOnly: true
{% if s3_trust_anchors_list is defined %}
            - mountPath: /etc/s3-trust-anchors
              name: s3-trust-anchors
              readOnly: true
{% endif %}
{% endif %}
            - name: workdir
              mountPath: /data/workdir
      volumes:
{% if tpa_single_node_storage_region == 'None' %}
        - name: storage
          persistentVolumeClaim:
            claimName: storage
{% else %}
        - name: storage-secret
          secret:
            secretName: storage_secret
{% if s3_trust_anchors_list is defined %}
        - name: s3-trust-anchors
          configMap:
            name: s3-trust-anchors
{% endif %}
{% endif %}
        - name: workdir
          persistentVolumeClaim:
            claimName: workdir
